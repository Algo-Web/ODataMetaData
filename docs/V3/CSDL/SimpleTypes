## EDMSimpleType
Must Be: xs:string
Must Be: "Binary" || "Boolean" || "Byte" || "DateTime" || "DateTimeOffset" || "Time" || "Decimal" || "Double" || "Single" || "Geography" || "Point" || "LineString" || "Polygon" || "MultiPoint" || "MultiLineString" || "MultiPolygon" || "GeographyCollection" || "Geometry" || "GeometricPoint" || "GeometricLineString" || "GeometricPolygon" || "GeometricMultiPoint" || "GeometricMultiLineString" || "GeometricMultiPolygon" || "GeometryCollection" || "Guid" || "Int16" || "Int32" || "Int64" || "String" || "SByte"
Comment: EDM SimpleType instances for use by EDM Instance documents

## TMax
Must Be: xs:string
Must Be: "Max"

## TVariable
Must Be: xs:string
Must Be: "Variable"

## TMaxLengthFacet
Must Be:TMax
Must Be: xs:nonNegativeInteger

## TIsFixedLengthFacet
Must Be: xs:boolean

## TPrecisionFacet
Must Be: xs:nonNegativeInteger

## TScaleFacet
Must Be: xs:nonNegativeInteger

## TIsUnicodeFacet
Must Be: xs:boolean

## TCollationFacet
Must Be: xs:string

## TSridFacet
Must Be: TVariable ||  xs:nonNegativeInteger

## TGuidLiteral
Must Be: xs:string
Pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"

## TParameterMode
Must Be: xs:token
Must Be: "In" || "Out" || "InOut"


## TNamespaceName
Must Be: TQualifiedName
Max Length: 512

## TQualifiedName
Must Be: xs:string
Pattern Comment: The below pattern represents the allowed identifiers in ECMA specification plus the '.' for namespace qualification
Pattern: "[\p{L}\p{Nl}][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}(\.[\p{L}\p{Nl}][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}){0,}"


## TSimpleIdentifier
Must Be: xs:string
Max Length: 480
Pattern Comment: The below pattern represents the allowed identifiers in ECMA specification
Pattern: "[\p{L}\p{Nl}][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}"


## TPropertyType

Must Be: EDMSimpleType || TQualifiedName || xs:token
If xs:token {
    Pattern Comment: The below pattern represents the allowed identifiers in ECMA specification plus the '.' for namespace qualification
    Pattern: "[\p{L}\p{Nl}][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}(\.[\p{L}\p{Nl}][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}){0,}"
}

## TCommandText
Must Be: xs:string
White Space: preserve

## TFunctionImportParameterAndReturnType
Must Be: EDMSimpleType || TQualifiedName || xs:token
If xs:token {
    Pattern: "Collection\([^ \t]{1,}(\.[^ \t]{1,}){0,}\)"
}

## TWrappedFunctionType
Must Be: TQualifiedName || xs:token
If xs:token {
    Pattern: "(Collection|Ref)\([^ \t]{1,}(\.[^ \t]{1,}){0,}\)"
}

## TUnwrappedFunctionType
Must Be: TQualifiedName || xs:token
If xs:token {
    Pattern: "[^ \t]{1,}(\.[^ \t]{1,}){0,}"
}

## TAction
Must Be: xs:token
Must Be: "Cascade" || "None"

## TMultiplicity
Must Be: xs:token
Must Be: "0..1"" || "1" || "*"

## TConcurrencyMode
Must Be: xs:token
Must Be: "None" || "Fixed"